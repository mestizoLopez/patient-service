spring:
  application:
    name: patients-service

  profiles:
    active: dev

  datasource:
    url: jdbc:postgresql://localhost:5432/emr_patients
    username: ${DB_USERNAME:emr_user}
    password: ${DB_PASSWORD:emr_password}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
    open-in-view: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/emr}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8080/realms/emr/protocol/openid-connect/certs}

  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:emr_redis_password}
      database: 0
      timeout: 2000ms

  # =================================
  # KAFKA CONFIGURATION
  # =================================
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9094}
    client-id: ${spring.application.name}-${random.uuid}

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      enable-idempotence: true
      compression-type: snappy
      linger-ms: 20
      batch-size: 32768
      buffer-memory: 33554432
      max-in-flight-requests-per-connection: 1
      request-timeout-ms: 20000
      properties:
        spring.json.add.type.headers: false
        spring.json.type.mapping: >
          patientEvent:com.cappymerida.domain.records.PatientEvent,
          baseEvent:com.cappymerida.domain.records.BaseEvent

    consumer:
      group-id: ${spring.application.name}-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 10
      max-poll-interval-ms: 300000
      session-timeout-ms: 30000
      heartbeat-interval-ms: 10000
      properties:
        spring.json.trusted.packages: "com.cappymerida.domain.records"
        spring.json.type.mapping: >
          patientEvent:com.cappymerida.domain.records.PatientEvent,
          baseEvent:com.cappymerida.domain.records.BaseEvent

    listener:
      ack-mode: manual
      concurrency: 3
      poll-timeout: 3000
      type: batch

    streams:
      application-id: ${spring.application.name}-streams
      auto-startup: true
      replication-factor: 1

    admin:
      properties:
        request.timeout.ms: 20000
        default.api.timeout.ms: 20000

server:
  port: 8181
  servlet:
    context-path: /
  compression:
    enabled: true

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
    enabled: ${EUREKA_ENABLED:false}
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,kafka
  endpoint:
    health:
      show-details: always
    kafka:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      service: patients
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true

logging:
  level:
    com.cappymerida.patients: INFO
    org.springframework.kafka: WARN
    org.apache.kafka: WARN
    org.springframework.security: WARN

kafka:
  event:
    publishing:
      enabled: false # Deshabilitado para tests
    schema:
      validation-enabled: false